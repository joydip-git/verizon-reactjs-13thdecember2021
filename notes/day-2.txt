function:
	a. prototype object

	when a function is called,...
	b. context object
	c. owner object (this property of the context object)

prototype:
	a. every function that you create in JS will have an object, known as prototype object of the function. you can access the prototype object by using the 'prototype' property of the function.

	function person(...){} person.prototype

	b. every function's prototype object is linked with Object function's prototype object. Object function's prototype object acts like a base object for every other function's prototype object.

	person.prototype--->object.prototype

	c. this prototype object is created even before the function is called

	d. when you create a new object by calling a function (like a constructor function), that object is linked with the prototype object of that function. that means, prototype object of the function becomes base object for the new object created by calling the function as constructor function.

	var anilPersonObject = new peron(...)
	
	anilPersonObject ---> person.prototype --> object.prototype

	e. this link between the objects and the prototype object is known as prototype chain

when you call a function in JS,
	a. if the function is called with new keyword (like a constructor function), then the function gets bound to the new object created by JS engine
	b. if the function is called with a preceding object reference (objRef.fn()), the function gets bound to that object
	c. if the function is written using arrow function style (var fn = ()=>{}), it gets bound to the owner of the curent scope (where the function is written)
	d. if the function is called without any object reference and also without new keyword and also written not using arrow function style, then function gets bound to window object by default or none (in strict mode)


function person(name, id, salary) {
    this.name = name
    this.id = id
    this.salary = salary
    this.print = function () {
        return this.name + ' ' + this.id + ' ' + this.salary
    }
}
function trainee(name, id, salary, projectName) {
    //pass the reference of an object to which person function should be bound (owner) and then pass additional arguments
    //call function binds the person function to the current function's owner and THEN INVOKES THE FUNCTION ITSELF and set the properties and their values in the owner object
    person.call(this, name, id, salary)

    //bind function ONLY binds the person function to the current function's owner and returns the reference of the bound function. IT DOES NOT INVOKE THE FUNCTION ITSELF
    //var boundPersonFn = person.bind(this)
    // boundPersonFn(name,id,salary)


    this.traineeProject = projectName
    this.print = function () {
        return + ' ' + this.traineeProject
    }
}
	

JS, TS, NS, PS, VBS

ECMAScript

ES5
<2015
2015=> ES 6

....
2021=> ES262-A

ES6:
a. let keyword: locally scoped variable
b. const keyword: 
c. class-constructor-super-extends
d. 












