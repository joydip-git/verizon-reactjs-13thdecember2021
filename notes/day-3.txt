1. asynchronous calls, module, Node JS
2. SPA vs. server-side framework (asp.net/jsp-servlet)
3. React JS vs. other technologies
4. create a React JS from scratch
5. create a React JS aplication using tool

Ryan Dahl

Node JS:
a. web application - web page and web api (RESTful)
b. I/O
c. IoT
d. mobile
e. tools

C:\Program Files\nodejs\
C:\Users\joydip\AppData\Roaming\npm

Module:
	a JS/TS/NS file 
	it is used to expose certain APIs from your file

module format:
	1. Common JS: [this is default way/format to define module in Node JS applications]
			a. export: module.exports = {propName:memberName}
			b. import: const {member1, member2 } = require('module-path')
	2. ES6: 
		a. export: export member
			//message.js
			export function hello(){}

			export default function hello(){}

		b. import: import { member } from '<module-path>'
			//index.js
			import {hello} from './message'

			import x/hello from './message'

			import * as something from './module-path'
	3. AMD: asynchronous module definition

	4. UMD: Universal module definition

module loader:
	a s/w which understands module feature and loads the module in the runtime (browser/node)
	Note: browsers do not have module loader s/w unlike Node js (which has a common js module loader by default)
	solution: supply module loader s/w to browser

	a. RequireJS: expects the code to be written in AMD module format
	b. SystemJS
	etc.
	

Module {
  id: '.',  
  path: 'E:\\training\\verizon-reactjs-13thdecember2021\\codes\\day-3\\node-js-app',
  exports: {},  
  filename: 'E:\\training\\verizon-reactjs-13thdecember2021\\codes\\day-3\\node-js-app\\index.js',
  loaded: false,
  children: [],
  paths: [
    'E:\\training\\verizon-reactjs-13thdecember2021\\codes\\day-3\\node-js-app\\node_modules',
    'E:\\training\\verizon-reactjs-13thdecember2021\\codes\\day-3\\node_modules',
    'E:\\training\\verizon-reactjs-13thdecember2021\\codes\\node_modules',
    'E:\\training\\verizon-reactjs-13thdecember2021\\node_modules',
    'E:\\training\\node_modules',
    'E:\\node_modules'
  ]
}

function module(){
}

new module(....)

no module loader
index.js:1 Uncaught ReferenceError: require is not defined
    at index.js:1

after module loader was supplied:
common js:

Uncaught Error: Module name "manager/employeemanager" has not been loaded yet for context: _. Use require([])
https://requirejs.org/docs/errors.html#notloaded
    at makeError (require.js:5)
    at Object.s [as require] (require.js:5)
    at requirejs (require.js:5)
    at index.js:1

es6 import/export:
Uncaught SyntaxError: Cannot use import statement outside a module




1. ES6 or common js or any other module format is not understandable by Require JS
	solution: get your code with other module format converted into AMD module format 

2. new version of JS/TS code might not be interpreted by older browser
	solution: get your code (latest JS code) into older version of JS code

latest JS code (=>es6)--> older version of JS code (<es6): transpilation

trasnpilers:
	babel: JS code
	tsc: TS code

create package.json file:
npm init
npm init --yes

babel packages:
npm i @babel/core @babel/cli -D

command to run babel cli: 
.\node_modules\.bin\babel src --out-dir dist

or 
"compile":"babel src --out-dir dist" (package.json file)

terminal:
>npm run compile

install preset (collection of plugins) for ES6+ code to older vsrion of JS
>npm i @babel/preset-env -D

plugin: to convert es6 module format to amd module format
>npm i @babel/plugin-transform-modules-amd -D

SPA:
	one/single full/pure HTML file
	rest of the designs: components (partial HTML file)

URL chanages does not hit the server, rather hits the client and always loads different component designs in main HTML file

	a collection of components (building block)

Framework: Angular (MV-VM), service
Library: React JS - VDOM


3. React JS's JSX syntax needs to be transpiled into React.createElement() version
preset: @babel/preset-react

bundler:
webpack packages:
>npm i webpack webpack-cli webpack-dev-server -D

loader packages:
>npm i babel-loader html-loader css-loader style-loader html-webpack-plugin clean-webpack-plugin -D


